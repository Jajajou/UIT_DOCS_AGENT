name: uit-agent-backend

x-common-service: &common-service
  build: firecrawl/apps/api
  ulimits:
    nofile:
      soft: 65535
      hard: 65535
  networks:
    - backend
  extra_hosts:
    - "host.docker.internal:host-gateway"

x-common-env: &common-env
  REDIS_URL: ${REDIS_URL:-redis://redis:6379}
  REDIS_RATE_LIMIT_URL: ${REDIS_URL:-redis://redis:6379}
  PLAYWRIGHT_MICROSERVICE_URL: ${PLAYWRIGHT_MICROSERVICE_URL:-http://playwright-service:3000/scrape}
  NUQ_DATABASE_URL: postgres://postgres:postgres@nuq-postgres:5432/postgres
  USE_DB_AUTHENTICATION: ${USE_DB_AUTHENTICATION}
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  OPENAI_BASE_URL: ${OPENAI_BASE_URL}
  MODEL_NAME: ${MODEL_NAME}
  MODEL_EMBEDDING_NAME: ${MODEL_EMBEDDING_NAME}
  OLLAMA_BASE_URL: ${OLLAMA_BASE_URL}
  SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
  BULL_AUTH_KEY: ${BULL_AUTH_KEY}
  TEST_API_KEY: ${TEST_API_KEY}
  POSTHOG_API_KEY: ${POSTHOG_API_KEY}
  POSTHOG_HOST: ${POSTHOG_HOST}
  SUPABASE_ANON_TOKEN: ${SUPABASE_ANON_TOKEN}
  SUPABASE_URL: ${SUPABASE_URL}
  SUPABASE_SERVICE_TOKEN: ${SUPABASE_SERVICE_TOKEN}
  SELF_HOSTED_WEBHOOK_URL: ${SELF_HOSTED_WEBHOOK_URL}
  SERPER_API_KEY: ${SERPER_API_KEY}
  SEARCHAPI_API_KEY: ${SEARCHAPI_API_KEY}
  LOGGING_LEVEL: ${LOGGING_LEVEL}
  PROXY_SERVER: ${PROXY_SERVER}
  PROXY_USERNAME: ${PROXY_USERNAME}
  PROXY_PASSWORD: ${PROXY_PASSWORD}
  SEARXNG_ENDPOINT: ${SEARXNG_ENDPOINT}
  SEARXNG_ENGINES: ${SEARXNG_ENGINES}
  SEARXNG_CATEGORIES: ${SEARXNG_CATEGORIES}

x-mineru-common: &mineru-common
  image: mineru-vllm:latest
  restart: always
  environment:
    MINERU_MODEL_SOURCE: local
  ulimits:
    memlock: -1
    stack: 67108864
  ipc: host
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            device_ids: ["0"]
            capabilities: [gpu]

services:
  playwright-service:
    # Nếu không muốn build local, có thể dùng image có sẵn:
    # image: ghcr.io/firecrawl/playwright-service:latest
    build: firecrawl/apps/playwright-service-ts
    environment:
      PORT: 3000
      PROXY_SERVER: ${PROXY_SERVER}
      PROXY_USERNAME: ${PROXY_USERNAME}
      PROXY_PASSWORD: ${PROXY_PASSWORD}
      BLOCK_MEDIA: ${BLOCK_MEDIA}
    networks:
      - backend

  api:
    <<: *common-service
    environment:
      <<: *common-env
      HOST: "0.0.0.0"
      PORT: ${INTERNAL_PORT:-3002}
      EXTRACT_WORKER_PORT: ${EXTRACT_WORKER_PORT:-3004}
      WORKER_PORT: ${WORKER_PORT:-3005}
      ENV: local
    depends_on:
      - redis
      - playwright-service
    ports:
      - "${PORT:-3002}:${INTERNAL_PORT:-3002}"
    command: node dist/src/harness.js --start-docker

  redis:
    image: redis:alpine
    # Hoặc dùng Valkey (chưa được kiểm chứng với Firecrawl):
    # image: valkey/valkey:alpine
    networks:
      - backend
    command: redis-server --bind 0.0.0.0

  nuq-postgres:
    build: firecrawl/apps/nuq-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      - backend
    ports:
      - "5439:5432"

  # LightRAG – hệ quản lý tri thức văn bản
  lightrag_docs:
    image: ghcr.io/hkuds/lightrag:latest
    build:
      context: LightRAG
      dockerfile: LightRAG/Dockerfile
      tags:
        - ghcr.io/hkuds/lightrag:latest
    env_file: .env.lightrag
    ports: ["9622:9621"]
    depends_on:
      postgres_docs:
        condition: service_started
      qdrant_docs:
        condition: service_started
    volumes:
      - ./LightRAG/data/rag_storage_docs:/app/data/rag_storage
      - ./LightRAG/data/inputs_docs:/app/data/inputs
      - ./LightRAG/data/tiktoken_doc:/app/data/tiktoken
      - ./config.ini:/app/config.ini
      - ./.env:/app/.env
    environment:
      - TIKTOKEN_CACHE_DIR_DOC=/app/data/tiktoken

  postgres_docs:
    image: pgvector/pgvector:pg16
    env_file: .env.lightrag
    environment:
      POSTGRES_DB: KB_DOCS
    ports: ["5433:5432"]
    volumes:
      - ./LightRAG/data/pg_data_docs:/var/lib/postgresql/data_docs

  qdrant_docs:
    image: qdrant/qdrant:latest
    ports:
      - "6336:6333"
      - "6337:6334"
    volumes:
      - ./LightRAG/data/qdrant_data_docs:/qdrant/storage_docs
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:6336/readyz || curl -fsS http://localhost:6336/readyz || wget -q -O- http://localhost:6336/healthz || curl -fsS http://localhost:6336/healthz || exit 1"]
      interval: 3s
      timeout: 2s
      retries: 40
      start_period: 5s

  # MinerU – nhóm các dịch vụ dùng chung image mineru-vllm
  mineru-vllm-server:
    <<: *mineru-common
    profiles: ["vllm-server"]
    ports:
      - "30000:30000"
    entrypoint: mineru-vllm-server
    command: ["--host","0.0.0.0","--port","30000"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:30000/health || exit 1"]

  mineru-api:
    <<: *mineru-common
    profiles: ["api"]
    env_file: .env.lightrag
    ports:
      - "8000:8000"
    entrypoint: mineru-api
    command: ["--host","0.0.0.0","--port","8000"]
    
    environment:
      - MINERU_MODEL_SOURCE=${MINERU_MODEL_SOURCE} 
      - MINERU_TOOLS_CONFIG_JSON=/app/config/mineru.json
      - MINERU_DEVICE_MODE=${MINERU_DEVICE_MODE}
      - MINERU_VIRTUAL_VRAM_SIZE=${MINERU_VIRTUAL_VRAM_SIZE}
      
    volumes:
      - ${MINERU_CONFIG_FILE_PATH}:/app/config/mineru.json:ro
      
      - ${MODEL_VOLUME_PATH}:/app/models:ro
  mineru-gradio:
    <<: *mineru-common
    profiles: ["gradio"]
    ports:
      - "7860:7860"
    entrypoint: mineru-gradio
    command: ["--server-name","0.0.0.0","--server-port","7860","--enable-vllm-engine","true"]

networks:
  backend:
    driver: bridge